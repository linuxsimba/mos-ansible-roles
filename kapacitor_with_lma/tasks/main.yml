- name: copy custom fact for collecting pacemaker cluster DC info
  copy:
    src: pcs_cluster_dc.py
    dest: /etc/ansible/facts.d/pcs_cluster_dc.fact
    mode: 0755
    owner: root
    group: root

- name: get the cluster DC if it is not already available in the setup output
  setup: filter="ansible_local.*"
  when: ansible_local.pcs_cluster_dc is not defined

- name: copy kapacitor deb to the /tmp directory
  copy:
    src: "{{ kapacitor_deb }}"
    dest: "/tmp/{{ kapacitor_deb }}"

- name: install kapacitor
  apt:
    deb: "/tmp/{{ kapacitor_deb }}"
  register: kapacitor_installed

# Run a block that executes only on the pacemaker cluster DC
# These tasks create the Kapacitor Pacemaker Resource
# The rule is that only one kapacitor instance runs on any of the machines
# in the cluster. And the kapacitor instance must run on the same node
# running the VIP called infrastructure_mgmt_vip.
- block:
  - name: create kapacitor pcs resource
    pcs_resource:
      command: 'create'
      resource_id: 'kapacitor'
      type: 'lsb:kapacitor'
    register: pcs_resource_status
    notify:
      - start kapacitor resource

  # MOS configures Cluster with an Opt-In config. So each time you create a new
  # resource you must state that the resource must run on all nodes in the
  # cluster.
  - name: |
      if the kapacitor resource is created tell pacemaker that
      kapacitor can run on any host in the LMA cluster
    command: "pcs constraint location kapacitor prefers {{item}}.{{ansible_domain}}=100"
    with_items: "{{ groups['lma'] }}"
    when: pcs_resource_status.changed == True

  - name: make sure that kapacitor resource runs on the same node as the infrastucture mgmt VIP
    command: "pcs constraint colocation add kapacitor with vip__infrastructure_alerting_mgmt_vip"
    when: pcs_resource_status.changed == True

  when: ansible_nodename == ansible_local.pcs_cluster_dc.hostname

- name: copy kapacitor config file
  template:
    src: kapacitor.conf.j2
    dest: /etc/kapacitor/kapacitor.conf
  notify:
    - restart kapacitor resource

- name: create kapacitor alert folder
  file: path="{{alert_dir}}" state=directory mode=0755 owner=root

- name: copy alerts to the kapacitor alert folder
  copy:
    src:  "{{item}}.tick"
    dest: "{{alert_dir}}/{{item}}.tick"
  with_items: "{{ alert_list }}"
  register: tick_file

- block:
  - name: stop kapacitor pacemaker resource
    shell: crm resource stop kapacitor
    ignore_errors: yes

  - name: start kapacitor
    service: name=kapacitor state=started

  - meta: flush_handlers

  - name: give kapacitor a few seconds to start
    pause: seconds=10

  - command: "kapacitor delete tasks {{ item }}"
    with_items: "{{ alert_list }}"

  - name: stop kapacitor
    service: name=kapacitor state=stopped
    notify:
      - start kapacitor resource

  - fail:  msg="stop here"
  when: "delete_tasks is defined"

- name: check influxdb
  command: service influxdb status
  register: influxdb_status
  ignore_errors: yes

- name: install restart kapacitor crontab file
  copy: src=restart_kapacitor.sh dest=/usr/local/bin/restart_kapacitor mode=0750

- name: insert crontab to restart kapacitor when it fails
  cron:
    name: "restart kapacitor"
    minute: "*/10"
    job: "/usr/local/bin/restart_kapacitor"

- block:
  - name: stop kapacitor pacemaker resource
    shell: crm resource stop kapacitor
    ignore_errors: yes
    delegate_to: "{{ groups['lma'][0] }}"


  - name: give kapacitor resource a few seconds to stop
    pause: seconds=10

  - name: start kapacitor process
    service: name=kapacitor state=started

  - name: define each alert
    shell:  "kapacitor define -name {{item}} -type stream -tick {{item}}.tick -dbrp {{kapacitor_dbname}}.{{kapacitor_retention_policy}}"
    args:
      chdir: "{{ alert_dir}}"
    with_items: "{{ alert_list }}"

  - name: enable each alert
    command:  "kapacitor enable {{item}}"
    with_items: "{{ alert_list }}"

  - name: reload each alert stats
    command: "kapacitor reload {{item}}"
    with_items: "{{ alert_list }}"

  - name: stop kapacitor process
    service: name=kapacitor state=stopped

  - name: restart kapacitor pacemaker resource
    shell: crm resource start kapacitor
    ignore_errors: yes
    delegate_to: "{{ groups['lma'][0] }}"

  when: (influxdb_status.rc == 0) and (tick_file.changed == True or install_alert is defined)
